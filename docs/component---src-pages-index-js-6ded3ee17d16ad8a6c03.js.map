{"version":3,"sources":["webpack:///./src/components/TorchCharacter.js","webpack:///./src/components/Torch.js","webpack:///./src/pages/index.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["TorchCharacter","toggleHover","_this","props","hover","row","column","randomInt","min","max","Math","random","render","style","fontSize","this","size","color","flexGrow","textAlign","fontVariationSettings","width","weight","height","transition","level","transform","react_default","a","createElement","onMouseEnter","onTouchStart","character","React","Component","Torch","colors","background","_React$Component","call","Color","hsl","font","torch","state","grid","focus","altTest","text","replace","toUpperCase","ariaLabel","altText","resize","bind","_assertThisInitialized","newFocusPoint","componentDidMount","createGrid","refs","container","window","addEventListener","document","event","preventDefault","componentWillUnmount","removeEventListener","element","focalPoint","_this2","boundingBox","getBoundingClientRect","sizes","itemSize","rows","floor","columns","extraDiffusion","diffusionSteps","diffusionLevelWeights","weightStepDiff","previousWeight","diffusionLevelWidths","widthStepDiff","previousWidth","diffusionLevelColors","colorStepDiff","previousColor","matrixLength","textFillRepeats","length","matrixString","Array","fill","join","substring","diffusionMatrix","contents","push","_loop","forEach","rowIndex","columnIndex","neighborsHaveLevel","matrix","stringPosition","createGridItem","rainbow","h","s","l","setState","prevState","left","doesMatrixPositionExist","right","top","bottom","_this3","renderMatrix","rowStyle","display","flexWrap","justifyContent","rowContents","components_TorchCharacter","key","ref","aria-label","backgroundColor","userSelect","overflow","flexDirection","alignContent","IndexPage","layout","seo","title","components_Torch","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Layout","_ref","children","Fragment","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","concat","defaultProps"],"mappings":"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","file":"component---src-pages-index-js-6ded3ee17d16ad8a6c03.js","sourcesContent":["import React from \"react\"\n\nclass TorchCharacter extends React.Component {\n\ttoggleHover = () => {\n\t\tthis.props.hover(this.props.row, this.props.column)\n\t}\n\n\trandomInt(min, max) {\n\t\treturn Math.random() * (max - min) + min\n\t}\n\n\trender() {\n\t\tlet style = {\n\t\t\tfontSize: this.props.size,\n\t\t\tcolor: this.props.color,\n\t\t\tflexGrow: `1`,\n\t\t\ttextAlign: `center`,\n\t\t\tfontVariationSettings: `'wdth' ${this.props.width}, 'wght' ${this.props.weight}`,\n\t\t\twidth: this.props.size +'px',\n\t\t\theight: this.props.size +'px',\n\t\t\ttransition: `color .1s ease-in-out, font-variation-settings .1s ease-in-out, rotate .1s ease-in-out`\n\t\t}\n\t\tif ( this.props.level > 0 ) {\n\t\t\tstyle.transform = `rotate(${this.randomInt(-30,30)}deg)`\n\t\t}\n\t\treturn (\n\t\t  <span\n\t\t  \tonMouseEnter={this.toggleHover}\n\t\t  \tonTouchStart={this.toggleHover}\n\t\t  \tstyle={style}\n\t\t  >\n\t\t    {this.props.character}\n\t\t  </span>\n\t\t)\n\t}\n}\n\nexport default TorchCharacter","import React from \"react\"\nimport Color from \"color\"\n\nimport TorchCharacter from \"./TorchCharacter\"\n\nclass Torch extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tlet colors = {\n\t\t\tbackground: this.props.background ? Color(this.props.background).hsl() : Color(\"#272727\").hsl(),\n\t\t\tfont: this.props.background ? Color(this.props.background).hsl() : Color(\"black\").hsl(),\n\t\t\ttorch: this.props.background ? Color(this.props.background).hsl() : Color(\"white\").hsl(),\n\t\t}\n\t\tthis.state = {\n\t\t\tgrid: {},\n\t\t\tcolors: colors,\n\t\t\tfocus: { row:0, column:0 }\n\t\t}\n\t\tthis.altTest = this.props.text ? this.props.text : \"TorchDemo\"\n\t\tthis.text = this.props.text ? this.props.text.replace(/\\s+/g, '').toUpperCase() : \"TorchDemo\".toUpperCase()\n\t\tthis.ariaLabel = \"A torch demo with the text \" + this.altText + \" repeating\"\n\t\tthis.resize = this.resize.bind(this)\n\t\tthis.newFocusPoint = this.newFocusPoint.bind(this)\n\t}\n\n\tcomponentDidMount() {\n  \tthis.createGrid( this.refs.container, this.state.focus )\n  \twindow.addEventListener(\"resize\", this.resize)\n  \tdocument.addEventListener('contextmenu', event => event.preventDefault())\n  }\n\n  componentWillUnmount() {\n  \twindow.removeEventListener(\"resize\", this.resize)\n  }\n\n  resize() {\n  \tthis.createGrid( this.refs.container, this.state.focus )\n  }\n\n\tcreateGrid( element, focalPoint ) {\n\t\t// I know this is too long of a function\n\t\tlet grid = {}\n\n\t\t// get element size\n\t\tlet boundingBox = element.getBoundingClientRect()\n\t\tlet sizes = {\n\t\t\twidth:\tboundingBox.width,\n\t\t\theight:\tboundingBox.height\n\t\t}\n\n\t\t// determine grid item size\n\t\tif ( sizes.width < 600 || sizes.height < 600 ) {\n\t\t\tgrid.itemSize = 100\n\t\t} else if ( sizes.width < 1200 || sizes.height < 1200 ) {\n\t\t\tgrid.itemSize = 150\n\t\t} else {\n\t\t\tgrid.itemSize = 200\n\t\t}\n\n\t\t// determine grid rows and columns\n\t\tgrid.rows = Math.floor( sizes.height / grid.itemSize )\n\t\t// grid.rowGutter = Math.floor( sizes.height / grid.rows )\n\t\tgrid.columns = Math.floor( sizes.width / grid.itemSize )\n\t\t// grid.columnGutter = Math.floor( sizes.width / grid.columns )\n\n\t\t// determine appropriate levels of extra diffusion\n\t\t//   all grids get 2 diffusion levels by default\n\t\t//   dividing by x is a completely arbiratry choice\n\t\tgrid.extraDiffusion = Math.floor( ( grid.columns >= grid.rows ? grid.columns/8 : grid.rows/8 ) )\n\n\t\t// build diffusion info\n\t\tgrid.diffusionSteps = grid.extraDiffusion + 2\n\n\t\t// build diffusion weight - built around gingham\n\t\tgrid.diffusionLevelWeights = [ 300 ]\n\t\tlet weightStepDiff = 400/grid.diffusionSteps\n\t\tfor ( let level = 1; level < grid.diffusionSteps + 1 ; level++ ) {\n\t\t\tlet previousWeight = grid.diffusionLevelWeights[level - 1]\n\t\t\tlet weight = Math.floor( previousWeight + weightStepDiff )\n\t\t\tif ( weight > 700 ) {\n\t\t\t\tweight = 700\n\t\t\t} else if ( weight < 300 ) {\n\t\t\t\tweight = 300\n\t\t\t}\n\t\t\tgrid.diffusionLevelWeights[level] = weight\n\t\t}\n\n\t\t// build diffusion widths - built around gingham\n\t\tgrid.diffusionLevelWidths = [ 1 ]\n\t\tlet widthStepDiff = 150/grid.diffusionSteps\n\t\tfor ( let level = 1; level < grid.diffusionSteps + 1 ; level++ ) {\n\t\t\tlet previousWidth = grid.diffusionLevelWidths[level - 1]\n\t\t\tlet width = Math.floor( previousWidth + widthStepDiff )\n\t\t\tif ( width > 150 ) {\n\t\t\t\twidth = 150\n\t\t\t} else if ( width < 1 ) {\n\t\t\t\twidth = 1\n\t\t\t}\n\t\t\tgrid.diffusionLevelWidths[level] = width\n\t\t}\n\n\t\t//build diffusion colors\n\t\tgrid.diffusionLevelColors = [ this.state.colors.font ]\n\t\tlet colorStepDiff = (this.state.colors.torch.color[2] - this.state.colors.font.color[2])/grid.diffusionSteps\n\t\tfor ( let level = 1; level < grid.diffusionSteps + 1 ; level++ ) {\n\t\t\tlet previousColor = grid.diffusionLevelColors[level - 1]\n\t\t\tlet color = Color(previousColor).hsl()\n\t\t\tcolor.color[2] = Math.floor( color.color[2] + colorStepDiff )\n\t\t\tif ( color.color[2] > 100 ) {\n\t\t\t\tcolor.color[2] = 100\n\t\t\t} else if ( color.color[2] < 0 ) {\n\t\t\t\tcolor.color[2] = 0\n\t\t\t}\n\t\t\tgrid.diffusionLevelColors[level] = color\n\t\t}\n\n\t\t// build matrix string\n\t\tlet matrixLength = grid.columns * grid.rows\n\t\tlet textFillRepeats = Math.floor( matrixLength / this.text.length ) + 1\n\t\tlet matrixStringArray = new Array( textFillRepeats ).fill( this.text )\n\t\tlet matrixString = matrixStringArray.join( '' ).substring( 0, matrixLength )\n\n\t\t// build empty diffusion matrix\n\t\tgrid.diffusionMatrix = []\n\t\tfor ( let row = 0; row < grid.rows; row++ ) {\n\t\t\tlet contents = []\n\t\t\tfor ( let column = 0; column < grid.columns; column++ ) {\n\t\t\t\tcontents.push(0)\n\t\t\t}\n\t\t\tgrid.diffusionMatrix.push( contents )\n\t\t}\n\n\t\t// update with focal points\n\t\t// place center\n\t\tgrid.diffusionMatrix[focalPoint.row][focalPoint.column] = grid.diffusionSteps\n\t\t// loop thru each level\n\t\tfor ( let level = grid.diffusionSteps - 1; level > 0; level-- ) {\n\t\t\t// loop through each matrix element\n\t\t\tgrid.diffusionMatrix.forEach( (row, rowIndex) => {\n\t\t\t\trow.forEach( (column, columnIndex) => {\n\t\t\t\t\t// check if any neighbors have previous level\n\t\t\t\t\tif ( this.neighborsHaveLevel( grid.diffusionMatrix, level + 1, rowIndex, columnIndex ) && grid.diffusionMatrix[rowIndex][columnIndex] < level ) {\n\t\t\t\t\t\t// if so mark as this level\n\t\t\t\t\t\tgrid.diffusionMatrix[rowIndex][columnIndex] = level\n\t\t\t\t\t}\t\t\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\n\t\t// build matrix from matrix string\n\t\tgrid.matrix = []\n\t\tlet stringPosition = 0\n\t\tfor ( let row = 0; row < grid.rows; row++ ) {\n\t\t\tlet contents = []\n\t\t\tfor ( let column = 0; column < grid.columns; column++ ) {\n\t\t\t\tlet level = grid.diffusionMatrix[row][column]\n\t\t\t\tcontents.push(\n\t\t\t\t\tthis.createGridItem(\n\t\t\t\t\t\tmatrixString[stringPosition],\n\t\t\t\t\t\tgrid.diffusionLevelColors[level],\n\t\t\t\t\t\trow,\n\t\t\t\t\t\tcolumn,\n\t\t\t\t\t\tlevel,\n\t\t\t\t\t\tgrid.diffusionLevelWeights[level],\n\t\t\t\t\t\tgrid.diffusionLevelWidths[level],\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\tstringPosition++\n\t\t\t}\n\t\t\tgrid.matrix.push( contents )\n\t\t}\n\n\t\tif (this.props.rainbow) {\n\t\t\tlet colors = {\n\t\t\t\tbackground: Color({\n\t\t\t\t\th: this.randomInt(0,255),\n\t\t\t\t\ts: this.randomInt(0,255),\n\t\t\t\t\tl: this.randomInt(0,100)\n\t\t\t\t}),\n\t\t\t\tfont: Color({\n\t\t\t\t\th: this.randomInt(0,255),\n\t\t\t\t\ts: this.randomInt(0,255),\n\t\t\t\t\tl: this.randomInt(0,100)\n\t\t\t\t}),\n\t\t\t\ttorch: Color({\n\t\t\t\t\th: this.randomInt(0,255),\n\t\t\t\t\ts: this.randomInt(0,255),\n\t\t\t\t\tl: this.randomInt(0,100)\n\t\t\t\t})\n\t\t\t}\n\t\t\t// set state with new grid\n\t\t\tthis.setState( prevState => ({\n\t\t\t\tcolors: colors\n\t\t\t}))\n\t\t}\n\n\t\t// set state with new grid\n\t\tthis.setState( prevState => ({\n\t\t\tgrid: grid,\n\t\t\tfocus: focalPoint\n\t\t}))\n\t}\n\n\tneighborsHaveLevel( matrix, level, row, column ) {\n\t\tlet left = ( this.doesMatrixPositionExist( matrix, row, column - 1 ) && ( matrix[row][column - 1] === level ) )\n\t\tlet right = ( this.doesMatrixPositionExist( matrix, row, column + 1 ) && ( matrix[row][column + 1] === level ) )\n\t\tlet top = ( this.doesMatrixPositionExist( matrix, row - 1, column ) && ( matrix[row - 1][column] === level ) )\n\t\tlet bottom = ( this.doesMatrixPositionExist( matrix, row + 1, column ) && ( matrix[row + 1][column] === level ) )\n\t\treturn left || right || top || bottom\n\t}\n\n\tdoesMatrixPositionExist(matrix, row, column) {\n\t\t// check if past length or below 0\n\t\treturn !( row > matrix.length - 1 || row < 0 || column > matrix[0].length - 1 || column < 0 )\n\t}\n\n\tcreateGridItem( character, color, row, column, level, weight, width ) {\n\t\treturn {\n\t\t\tcharacter: character,\n\t\t\tcolor: color,\n\t\t\tlevel: level,\n\t\t\trow: row,\n\t\t\tcolumn: column,\n\t\t\twidth: width,\n\t\t\tweight: weight\n\t\t}\n\t}\n\n\tnewFocusPoint(row, column) {\n\t\tthis.createGrid( this.refs.container, { row:row, column:column } )\n\t}\n\n\trandomInt(min, max) {\n\t\treturn Math.random() * (max - min) + min\n\t}\n\n\trender() {\n\t\tlet renderMatrix = []\n\t\tlet rowStyle = {\n\t\t\tdisplay: `flex`,\n\t\t\tflexWrap: `nowrap`,\n\t\t\tjustifyContent: `space-between`\n\t\t}\n\t\tif ( this.state.grid.matrix ) {\n\t\t\tthis.state.grid.matrix.forEach( (row, rowIndex) => {\n\t\t\t\tlet rowContents = []\n\t\t\t\trow.forEach( column => {\n\t\t\t\t\trowContents.push(\n\t\t\t\t\t\t<TorchCharacter\n\t\t\t\t\t\t\tcharacter={column.character}\n\t\t\t\t\t\t\tsize={this.state.grid.itemSize}\n\t\t\t\t\t\t\tcolor={column.color}\n\t\t\t\t\t\t\tlevel={column.level}\n\t\t\t\t\t\t\tkey={(column.row * 10) + column.column}\n\t\t\t\t\t\t\thover={this.newFocusPoint}\n\t\t\t\t\t\t\trow={column.row}\n\t\t\t\t\t\t\tcolumn={column.column}\n\t\t\t\t\t\t\twidth={column.width}\n\t\t\t\t\t\t\tweight={column.weight}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t\trenderMatrix.push(\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={rowStyle}\n\t\t\t\t\t\tkey={rowIndex}\n\t\t\t\t\t>\n\t\t\t\t\t\t{rowContents}\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})\n\t\t}\n\n\t\treturn (\n\t\t  <div\n\t\t  \tref=\"container\"\n\t\t  \taria-label={this.ariaLabel}\n\t\t  \tstyle={{\n\t\t  \t\tbackgroundColor: this.state.colors.background,\n\t\t  \t\ttransition: `background-color .1s ease-in-out`,\n\t\t\t  \tuserSelect: `none`,\n\t\t  \t}}\n\t\t  >\n\t\t  \t<div\n\t\t  \t\tstyle={{\n\t\t  \t\t\twidth: `100vw`,\n\t\t  \t\t\theight: `100vh`,\n\t\t  \t\t\toverflow: `hidden`,\n\t\t\t  \t\tdisplay: `flex`,\n\t\t\t  \t\tflexDirection: `column`,\n\t\t\t  \t\tjustifyContent: `space-between`,\n\t\t\t  \t\talignContent: `strech`,\n\t\t  \t\t}}\n\t\t  \t>\n\t\t  \t\t{renderMatrix}\n\t\t  \t</div>\n\t\t  </div>\n\t\t)\n\t}\n}\n\nexport default Torch","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nimport Torch from \"../components/Torch\"\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Home\" />\n    <Torch text=\"Nathan Crank\" rainbow={true}/>\n  </Layout>\n)\n\nexport default IndexPage\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport \"./layout.css\"\nimport \"../fonts/gingham/gingham.css\"\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <main>{children}</main>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        }\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}