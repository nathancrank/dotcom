{"version":3,"sources":["webpack:///./src/components/TorchCharacter.js","webpack:///./src/components/Torch.js","webpack:///./src/pages/index.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["TorchCharacter","toggleHover","_this","props","hover","row","column","randomInt","min","max","Math","random","render","style","fontSize","this","size","color","flexGrow","textAlign","fontVariationSettings","width","weight","height","transition","level","transform","PointerEvent","react_default","a","createElement","onPointerEnter","character","onMouseEnter","React","Component","Torch","colors","background","_React$Component","call","Color","hsl","font","torch","state","grid","focus","altTest","text","replace","toUpperCase","ariaLabel","altText","resize","bind","_assertThisInitialized","newFocusPoint","componentDidMount","createGrid","refs","container","window","addEventListener","reorient","document","event","preventDefault","componentWillUnmount","removeEventListener","element","focalPoint","_this2","boundingBox","getBoundingClientRect","sizes","itemSize","rows","floor","columns","extraDiffusion","diffusionSteps","diffusionLevelWeights","weightStepDiff","previousWeight","diffusionLevelWidths","widthStepDiff","previousWidth","diffusionLevelColors","colorStepDiff","previousColor","matrixLength","textFillRepeats","length","matrixString","Array","fill","join","substring","diffusionMatrix","contents","push","_loop","forEach","rowIndex","columnIndex","neighborsHaveLevel","matrix","stringPosition","createGridItem","rainbow","h","s","l","setState","prevState","left","doesMatrixPositionExist","right","top","bottom","_this3","renderMatrix","rowStyle","display","flexWrap","justifyContent","rowContents","components_TorchCharacter","key","ref","aria-label","backgroundColor","userSelect","overflow","flexDirection","alignContent","IndexPage","layout","seo","title","components_Torch","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Layout","_ref","children","Fragment","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","concat","defaultProps"],"mappings":"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","file":"component---src-pages-index-js-c015b57d6af4e3afc0b2.js","sourcesContent":["import React from \"react\"\n\nclass TorchCharacter extends React.Component {\n\ttoggleHover = () => {\n\t\tthis.props.hover(this.props.row, this.props.column)\n\t}\n\n\trandomInt(min, max) {\n\t\treturn Math.random() * (max - min) + min\n\t}\n\n\trender() {\n\t\tlet style = {\n\t\t\tfontSize: this.props.size,\n\t\t\tcolor: this.props.color,\n\t\t\tflexGrow: `1`,\n\t\t\ttextAlign: `center`,\n\t\t\tfontVariationSettings: `'wdth' ${this.props.width}, 'wght' ${this.props.weight}`,\n\t\t\twidth: this.props.size +'px',\n\t\t\theight: this.props.size +'px',\n\t\t\ttransition: `color .1s ease-in-out, font-variation-settings .1s ease-in-out, rotate .1s ease-in-out`\n\t\t}\n\t\tif ( this.props.level > 0 ) {\n\t\t\tstyle.transform = `rotate(${this.randomInt(-30,30)}deg)`\n\t\t}\n\t\tif (typeof PointerEvent === \"function\") {\n\t\t\treturn (\n\t\t\t  <span\n\t\t\t  \tonPointerEnter={this.toggleHover}\n\t\t\t  \tstyle={style}\n\t\t\t  >\n\t\t\t    {this.props.character}\n\t\t\t  </span>\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t  <span\n\t\t\t  \tonMouseEnter={this.toggleHover}\n\t\t\t  \tstyle={style}\n\t\t\t  >\n\t\t\t    {this.props.character}\n\t\t\t  </span>\n\t\t\t)\n\t\t}\n\t}\n}\n\nexport default TorchCharacter","import React from \"react\"\nimport Color from \"color\"\n\nimport TorchCharacter from \"./TorchCharacter\"\n\nclass Torch extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tlet colors = {\n\t\t\tbackground: this.props.background ? Color(this.props.background).hsl() : Color(\"#272727\").hsl(),\n\t\t\tfont: this.props.background ? Color(this.props.background).hsl() : Color(\"black\").hsl(),\n\t\t\ttorch: this.props.background ? Color(this.props.background).hsl() : Color(\"white\").hsl(),\n\t\t}\n\t\tthis.state = {\n\t\t\tgrid: {},\n\t\t\tcolors: colors,\n\t\t\tfocus: { row:0, column:0 }\n\t\t}\n\t\tthis.altTest = this.props.text ? this.props.text : \"TorchDemo\"\n\t\tthis.text = this.props.text ? this.props.text.replace(/\\s+/g, '').toUpperCase() : \"TorchDemo\".toUpperCase()\n\t\tthis.ariaLabel = \"A torch demo with the text \" + this.altText + \" repeating\"\n\t\tthis.resize = this.resize.bind(this)\n\t\tthis.newFocusPoint = this.newFocusPoint.bind(this)\n\t}\n\n\tcomponentDidMount() {\n  \tthis.createGrid( this.refs.container, this.state.focus )\n  \twindow.addEventListener(\"resize\", this.resize)\n  \twindow.addEventListener(\"orientationchange\", this.reorient)\n  \tdocument.addEventListener(\"contextmenu\", event => event.preventDefault())\n  }\n\n  componentWillUnmount() {\n  \twindow.removeEventListener(\"resize\", this.resize)\n  \twindow.removeEventListener(\"orientationchange\", this.reorient)\n  }\n\n\treorient() {\n\t\tthis.newFocusPoint(0,0)\n\t\tthis.resize()\n\t}\n\n  resize() {\n  \tthis.createGrid( this.refs.container, this.state.focus )\n  }\n\n\tcreateGrid( element, focalPoint ) {\n\t\t// I know this is too long of a function\n\t\tlet grid = {}\n\n\t\t// get element size\n\t\tlet boundingBox = element.getBoundingClientRect()\n\t\tlet sizes = {\n\t\t\twidth:\tboundingBox.width,\n\t\t\theight:\tboundingBox.height\n\t\t}\n\n\t\t// determine grid item size\n\t\tif ( sizes.width < 600 || sizes.height < 600 ) {\n\t\t\tgrid.itemSize = 100\n\t\t} else if ( sizes.width < 1200 || sizes.height < 1200 ) {\n\t\t\tgrid.itemSize = 150\n\t\t} else {\n\t\t\tgrid.itemSize = 200\n\t\t}\n\n\t\t// determine grid rows and columns\n\t\tgrid.rows = Math.floor( sizes.height / grid.itemSize )\n\t\t// grid.rowGutter = Math.floor( sizes.height / grid.rows )\n\t\tgrid.columns = Math.floor( sizes.width / grid.itemSize )\n\t\t// grid.columnGutter = Math.floor( sizes.width / grid.columns )\n\n\t\t// determine appropriate levels of extra diffusion\n\t\t//   all grids get 2 diffusion levels by default\n\t\t//   dividing by x is a completely arbiratry choice\n\t\tgrid.extraDiffusion = Math.floor( ( grid.columns >= grid.rows ? grid.columns/8 : grid.rows/8 ) )\n\n\t\t// build diffusion info\n\t\tgrid.diffusionSteps = grid.extraDiffusion + 2\n\n\t\t// build diffusion weight - built around gingham\n\t\tgrid.diffusionLevelWeights = [ 300 ]\n\t\tlet weightStepDiff = 400/grid.diffusionSteps\n\t\tfor ( let level = 1; level < grid.diffusionSteps + 1 ; level++ ) {\n\t\t\tlet previousWeight = grid.diffusionLevelWeights[level - 1]\n\t\t\tlet weight = Math.floor( previousWeight + weightStepDiff )\n\t\t\tif ( weight > 700 ) {\n\t\t\t\tweight = 700\n\t\t\t} else if ( weight < 300 ) {\n\t\t\t\tweight = 300\n\t\t\t}\n\t\t\tgrid.diffusionLevelWeights[level] = weight\n\t\t}\n\n\t\t// build diffusion widths - built around gingham\n\t\tgrid.diffusionLevelWidths = [ 1 ]\n\t\tlet widthStepDiff = 150/grid.diffusionSteps\n\t\tfor ( let level = 1; level < grid.diffusionSteps + 1 ; level++ ) {\n\t\t\tlet previousWidth = grid.diffusionLevelWidths[level - 1]\n\t\t\tlet width = Math.floor( previousWidth + widthStepDiff )\n\t\t\tif ( width > 150 ) {\n\t\t\t\twidth = 150\n\t\t\t} else if ( width < 1 ) {\n\t\t\t\twidth = 1\n\t\t\t}\n\t\t\tgrid.diffusionLevelWidths[level] = width\n\t\t}\n\n\t\t//build diffusion colors\n\t\tgrid.diffusionLevelColors = [ this.state.colors.font ]\n\t\tlet colorStepDiff = (this.state.colors.torch.color[2] - this.state.colors.font.color[2])/grid.diffusionSteps\n\t\tfor ( let level = 1; level < grid.diffusionSteps + 1 ; level++ ) {\n\t\t\tlet previousColor = grid.diffusionLevelColors[level - 1]\n\t\t\tlet color = Color(previousColor).hsl()\n\t\t\tcolor.color[2] = Math.floor( color.color[2] + colorStepDiff )\n\t\t\tif ( color.color[2] > 100 ) {\n\t\t\t\tcolor.color[2] = 100\n\t\t\t} else if ( color.color[2] < 0 ) {\n\t\t\t\tcolor.color[2] = 0\n\t\t\t}\n\t\t\tgrid.diffusionLevelColors[level] = color\n\t\t}\n\n\t\t// build matrix string\n\t\tlet matrixLength = grid.columns * grid.rows\n\t\tlet textFillRepeats = Math.floor( matrixLength / this.text.length ) + 1\n\t\tlet matrixStringArray = new Array( textFillRepeats ).fill( this.text )\n\t\tlet matrixString = matrixStringArray.join( '' ).substring( 0, matrixLength )\n\n\t\t// build empty diffusion matrix\n\t\tgrid.diffusionMatrix = []\n\t\tfor ( let row = 0; row < grid.rows; row++ ) {\n\t\t\tlet contents = []\n\t\t\tfor ( let column = 0; column < grid.columns; column++ ) {\n\t\t\t\tcontents.push(0)\n\t\t\t}\n\t\t\tgrid.diffusionMatrix.push( contents )\n\t\t}\n\n\t\t// update with focal points\n\t\t// place center\n\t\tgrid.diffusionMatrix[focalPoint.row][focalPoint.column] = grid.diffusionSteps\n\t\t// loop thru each level\n\t\tfor ( let level = grid.diffusionSteps - 1; level > 0; level-- ) {\n\t\t\t// loop through each matrix element\n\t\t\tgrid.diffusionMatrix.forEach( (row, rowIndex) => {\n\t\t\t\trow.forEach( (column, columnIndex) => {\n\t\t\t\t\t// check if any neighbors have previous level\n\t\t\t\t\tif ( this.neighborsHaveLevel( grid.diffusionMatrix, level + 1, rowIndex, columnIndex ) && grid.diffusionMatrix[rowIndex][columnIndex] < level ) {\n\t\t\t\t\t\t// if so mark as this level\n\t\t\t\t\t\tgrid.diffusionMatrix[rowIndex][columnIndex] = level\n\t\t\t\t\t}\t\t\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\n\t\t// build matrix from matrix string\n\t\tgrid.matrix = []\n\t\tlet stringPosition = 0\n\t\tfor ( let row = 0; row < grid.rows; row++ ) {\n\t\t\tlet contents = []\n\t\t\tfor ( let column = 0; column < grid.columns; column++ ) {\n\t\t\t\tlet level = grid.diffusionMatrix[row][column]\n\t\t\t\tcontents.push(\n\t\t\t\t\tthis.createGridItem(\n\t\t\t\t\t\tmatrixString[stringPosition],\n\t\t\t\t\t\tgrid.diffusionLevelColors[level],\n\t\t\t\t\t\trow,\n\t\t\t\t\t\tcolumn,\n\t\t\t\t\t\tlevel,\n\t\t\t\t\t\tgrid.diffusionLevelWeights[level],\n\t\t\t\t\t\tgrid.diffusionLevelWidths[level],\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\tstringPosition++\n\t\t\t}\n\t\t\tgrid.matrix.push( contents )\n\t\t}\n\n\t\tif (this.props.rainbow) {\n\t\t\tlet colors = {\n\t\t\t\tbackground: Color({\n\t\t\t\t\th: this.randomInt(0,255),\n\t\t\t\t\ts: this.randomInt(0,255),\n\t\t\t\t\tl: this.randomInt(0,100)\n\t\t\t\t}),\n\t\t\t\tfont: Color({\n\t\t\t\t\th: this.randomInt(0,255),\n\t\t\t\t\ts: this.randomInt(0,255),\n\t\t\t\t\tl: this.randomInt(0,100)\n\t\t\t\t}),\n\t\t\t\ttorch: Color({\n\t\t\t\t\th: this.randomInt(0,255),\n\t\t\t\t\ts: this.randomInt(0,255),\n\t\t\t\t\tl: this.randomInt(0,100)\n\t\t\t\t})\n\t\t\t}\n\t\t\t// set state with new grid\n\t\t\tthis.setState( prevState => ({\n\t\t\t\tcolors: colors\n\t\t\t}))\n\t\t}\n\n\t\t// set state with new grid\n\t\tthis.setState( prevState => ({\n\t\t\tgrid: grid,\n\t\t\tfocus: focalPoint\n\t\t}))\n\t}\n\n\tneighborsHaveLevel( matrix, level, row, column ) {\n\t\tlet left = ( this.doesMatrixPositionExist( matrix, row, column - 1 ) && ( matrix[row][column - 1] === level ) )\n\t\tlet right = ( this.doesMatrixPositionExist( matrix, row, column + 1 ) && ( matrix[row][column + 1] === level ) )\n\t\tlet top = ( this.doesMatrixPositionExist( matrix, row - 1, column ) && ( matrix[row - 1][column] === level ) )\n\t\tlet bottom = ( this.doesMatrixPositionExist( matrix, row + 1, column ) && ( matrix[row + 1][column] === level ) )\n\t\treturn left || right || top || bottom\n\t}\n\n\tdoesMatrixPositionExist(matrix, row, column) {\n\t\t// check if past length or below 0\n\t\treturn !( row > matrix.length - 1 || row < 0 || column > matrix[0].length - 1 || column < 0 )\n\t}\n\n\tcreateGridItem( character, color, row, column, level, weight, width ) {\n\t\treturn {\n\t\t\tcharacter: character,\n\t\t\tcolor: color,\n\t\t\tlevel: level,\n\t\t\trow: row,\n\t\t\tcolumn: column,\n\t\t\twidth: width,\n\t\t\tweight: weight\n\t\t}\n\t}\n\n\tnewFocusPoint(row, column) {\n\t\tthis.createGrid( this.refs.container, { row:row, column:column } )\n\t}\n\n\trandomInt(min, max) {\n\t\treturn Math.random() * (max - min) + min\n\t}\n\n\trender() {\n\t\tlet renderMatrix = []\n\t\tlet rowStyle = {\n\t\t\tdisplay: `flex`,\n\t\t\tflexWrap: `nowrap`,\n\t\t\tjustifyContent: `space-between`\n\t\t}\n\t\tif ( this.state.grid.matrix ) {\n\t\t\tthis.state.grid.matrix.forEach( (row, rowIndex) => {\n\t\t\t\tlet rowContents = []\n\t\t\t\trow.forEach( column => {\n\t\t\t\t\trowContents.push(\n\t\t\t\t\t\t<TorchCharacter\n\t\t\t\t\t\t\tcharacter={column.character}\n\t\t\t\t\t\t\tsize={this.state.grid.itemSize}\n\t\t\t\t\t\t\tcolor={column.color}\n\t\t\t\t\t\t\tlevel={column.level}\n\t\t\t\t\t\t\tkey={(column.row * 10) + column.column}\n\t\t\t\t\t\t\thover={this.newFocusPoint}\n\t\t\t\t\t\t\trow={column.row}\n\t\t\t\t\t\t\tcolumn={column.column}\n\t\t\t\t\t\t\twidth={column.width}\n\t\t\t\t\t\t\tweight={column.weight}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t\trenderMatrix.push(\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={rowStyle}\n\t\t\t\t\t\tkey={rowIndex}\n\t\t\t\t\t>\n\t\t\t\t\t\t{rowContents}\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})\n\t\t}\n\n\t\treturn (\n\t\t  <div\n\t\t  \tref=\"container\"\n\t\t  \taria-label={this.ariaLabel}\n\t\t  \tstyle={{\n\t\t  \t\tbackgroundColor: this.state.colors.background,\n\t\t  \t\ttransition: `background-color .1s ease-in-out`,\n\t\t\t  \tuserSelect: `none`,\n\t\t  \t}}\n\t\t  >\n\t\t  \t<div\n\t\t  \t\tstyle={{\n\t\t  \t\t\twidth: `100vw`,\n\t\t  \t\t\theight: `100vh`,\n\t\t  \t\t\toverflow: `hidden`,\n\t\t\t  \t\tdisplay: `flex`,\n\t\t\t  \t\tflexDirection: `column`,\n\t\t\t  \t\tjustifyContent: `space-between`,\n\t\t\t  \t\talignContent: `strech`,\n\t\t  \t\t}}\n\t\t  \t>\n\t\t  \t\t{renderMatrix}\n\t\t  \t</div>\n\t\t  </div>\n\t\t)\n\t}\n}\n\nexport default Torch","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nimport Torch from \"../components/Torch\"\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Home\" />\n    <Torch text=\"Nathan Crank\" rainbow={true}/>\n  </Layout>\n)\n\nexport default IndexPage\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport \"./layout.css\"\nimport \"../fonts/gingham/gingham.css\"\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <main>{children}</main>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        }\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}