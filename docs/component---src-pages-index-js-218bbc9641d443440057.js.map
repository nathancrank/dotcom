{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js","webpack:///./src/components/TorchCharacter.js","webpack:///./src/components/Torch.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_seo__WEBPACK_IMPORTED_MODULE_2__","_components_Torch__WEBPACK_IMPORTED_MODULE_3__","IndexPage","a","createElement","title","text","rainbow","react_helmet__WEBPACK_IMPORTED_MODULE_1__","Layout","_ref","children","Fragment","width","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","concat","defaultProps","TorchCharacter","toggleHover","_this","props","hover","row","column","randomInt","min","max","Math","random","render","style","fontSize","this","size","color","flexGrow","textAlign","fontVariationSettings","weight","height","transition","level","transform","PointerEvent","react_default","onPointerOver","character","onMouseOver","React","Component","Torch","colors","background","_React$Component","call","Color","hsl","font","torch","state","grid","focus","altTest","replace","toUpperCase","ariaLabel","altText","resize","bind","_assertThisInitialized","reorient","newFocusPoint","componentDidMount","createGrid","refs","container","window","addEventListener","document","event","preventDefault","componentWillUnmount","removeEventListener","element","focalPoint","_this2","boundingBox","getBoundingClientRect","sizes","itemSize","rows","floor","columns","extraDiffusion","diffusionSteps","diffusionLevelWeights","weightStepDiff","previousWeight","diffusionLevelWidths","widthStepDiff","previousWidth","diffusionLevelColors","colorStepDiff","previousColor","matrixLength","textFillRepeats","length","matrixString","Array","fill","join","substring","diffusionMatrix","contents","push","_loop","forEach","rowIndex","columnIndex","neighborsHaveLevel","matrix","stringPosition","createGridItem","h","s","l","setState","prevState","left","doesMatrixPositionExist","right","top","bottom","_this3","renderMatrix","rowStyle","display","flexWrap","justifyContent","rowContents","components_TorchCharacter","key","ref","aria-label","backgroundColor","userSelect","overflow","flexDirection","alignContent"],"mappings":"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","file":"component---src-pages-index-js-218bbc9641d443440057.js","sourcesContent":["import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nimport Torch from \"../components/Torch\"\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Home\" />\n    <Torch text=\"Nathan Crank\" rainbow={true}/>\n  </Layout>\n)\n\nexport default IndexPage\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\n\nimport \"./layout.css\"\nimport \"../fonts/gingham/gingham.css\"\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n    \t<Helmet>\n    \t\t<meta width=\"device-width, initial-scale=1, shrink-to-fit=no, maximum-scale=1.0, user-scalable=no, cover\" />\n    \t</Helmet>\n      <main>{children}</main>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        }\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\n\nclass TorchCharacter extends React.Component {\n\ttoggleHover = () => {\n\t\tthis.props.hover(this.props.row, this.props.column)\n\t}\n\n\trandomInt(min, max) {\n\t\treturn Math.random() * (max - min) + min\n\t}\n\n\trender() {\n\t\tlet style = {\n\t\t\tfontSize: this.props.size,\n\t\t\tcolor: this.props.color,\n\t\t\tflexGrow: `1`,\n\t\t\ttextAlign: `center`,\n\t\t\tfontVariationSettings: `'wdth' ${this.props.width}, 'wght' ${this.props.weight}`,\n\t\t\twidth: this.props.size +'px',\n\t\t\theight: this.props.size +'px',\n\t\t\ttransition: `color .1s ease-in-out, font-variation-settings .1s ease-in-out, rotate .1s ease-in-out`\n\t\t}\n\t\tif ( this.props.level > 0 ) {\n\t\t\tstyle.transform = `rotate(${this.randomInt(-30,30)}deg)`\n\t\t}\n\t\tif (typeof PointerEvent === \"function\") {\n\t\t\treturn (\n\t\t\t  <span\n\t\t\t  \tonPointerOver={this.toggleHover}\n\t\t\t  \tstyle={style}\n\t\t\t  >\n\t\t\t    {this.props.character}\n\t\t\t  </span>\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t  <span\n\t\t\t  \tonMouseOver={this.toggleHover}\n\t\t\t  \tstyle={style}\n\t\t\t  >\n\t\t\t    {this.props.character}\n\t\t\t  </span>\n\t\t\t)\n\t\t}\n\t}\n}\n\nexport default TorchCharacter","import React from \"react\"\nimport Color from \"color\"\n\nimport TorchCharacter from \"./TorchCharacter\"\n\nclass Torch extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tlet colors = {\n\t\t\tbackground: this.props.background ? Color(this.props.background).hsl() : Color(\"#272727\").hsl(),\n\t\t\tfont: this.props.background ? Color(this.props.background).hsl() : Color(\"black\").hsl(),\n\t\t\ttorch: this.props.background ? Color(this.props.background).hsl() : Color(\"white\").hsl(),\n\t\t}\n\t\tthis.state = {\n\t\t\tgrid: {},\n\t\t\tcolors: colors,\n\t\t\tfocus: { row:0, column:0 }\n\t\t}\n\t\tthis.altTest = this.props.text ? this.props.text : \"TorchDemo\"\n\t\tthis.text = this.props.text ? this.props.text.replace(/\\s+/g, '').toUpperCase() : \"TorchDemo\".toUpperCase()\n\t\tthis.ariaLabel = \"A torch demo with the text \" + this.altText + \" repeating\"\n\t\tthis.resize = this.resize.bind(this)\n\t\tthis.reorient = this.reorient.bind(this)\n\t\tthis.newFocusPoint = this.newFocusPoint.bind(this)\n\t}\n\n\tcomponentDidMount() {\n  \tthis.createGrid( this.refs.container, this.state.focus )\n  \twindow.addEventListener(\"resize\", this.resize)\n  \twindow.addEventListener(\"orientationchange\", this.reorient)\n  \tdocument.addEventListener(\"contextmenu\", event => event.preventDefault())\n  }\n\n  componentWillUnmount() {\n  \twindow.removeEventListener(\"resize\", this.resize)\n  \twindow.removeEventListener(\"orientationchange\", this.reorient)\n  }\n\n\treorient() {\n\t\tthis.newFocusPoint(0,0)\n\t}\n\n  resize() {\n  \tthis.createGrid( this.refs.container, this.state.focus )\n  }\n\n\tcreateGrid( element, focalPoint ) {\n\t\t// I know this is too long of a function\n\t\tlet grid = {}\n\n\t\t// get element size\n\t\tlet boundingBox = element.getBoundingClientRect()\n\t\tlet sizes = {\n\t\t\twidth:\tboundingBox.width,\n\t\t\theight:\tboundingBox.height\n\t\t}\n\n\t\t// determine grid item size\n\t\tif ( sizes.width < 600 || sizes.height < 600 ) {\n\t\t\tgrid.itemSize = 100\n\t\t} else if ( sizes.width < 1200 || sizes.height < 1200 ) {\n\t\t\tgrid.itemSize = 150\n\t\t} else {\n\t\t\tgrid.itemSize = 200\n\t\t}\n\n\t\t// determine grid rows and columns\n\t\tgrid.rows = Math.floor( sizes.height / grid.itemSize )\n\t\t// grid.rowGutter = Math.floor( sizes.height / grid.rows )\n\t\tgrid.columns = Math.floor( sizes.width / grid.itemSize )\n\t\t// grid.columnGutter = Math.floor( sizes.width / grid.columns )\n\n\t\t// determine appropriate levels of extra diffusion\n\t\t//   all grids get 2 diffusion levels by default\n\t\t//   dividing by x is a completely arbiratry choice\n\t\tgrid.extraDiffusion = Math.floor( ( grid.columns >= grid.rows ? grid.columns/8 : grid.rows/8 ) )\n\n\t\t// build diffusion info\n\t\tgrid.diffusionSteps = grid.extraDiffusion + 2\n\n\t\t// build diffusion weight - built around gingham\n\t\tgrid.diffusionLevelWeights = [ 300 ]\n\t\tlet weightStepDiff = 400/grid.diffusionSteps\n\t\tfor ( let level = 1; level < grid.diffusionSteps + 1 ; level++ ) {\n\t\t\tlet previousWeight = grid.diffusionLevelWeights[level - 1]\n\t\t\tlet weight = Math.floor( previousWeight + weightStepDiff )\n\t\t\tif ( weight > 700 ) {\n\t\t\t\tweight = 700\n\t\t\t} else if ( weight < 300 ) {\n\t\t\t\tweight = 300\n\t\t\t}\n\t\t\tgrid.diffusionLevelWeights[level] = weight\n\t\t}\n\n\t\t// build diffusion widths - built around gingham\n\t\tgrid.diffusionLevelWidths = [ 1 ]\n\t\tlet widthStepDiff = 150/grid.diffusionSteps\n\t\tfor ( let level = 1; level < grid.diffusionSteps + 1 ; level++ ) {\n\t\t\tlet previousWidth = grid.diffusionLevelWidths[level - 1]\n\t\t\tlet width = Math.floor( previousWidth + widthStepDiff )\n\t\t\tif ( width > 150 ) {\n\t\t\t\twidth = 150\n\t\t\t} else if ( width < 1 ) {\n\t\t\t\twidth = 1\n\t\t\t}\n\t\t\tgrid.diffusionLevelWidths[level] = width\n\t\t}\n\n\t\t//build diffusion colors\n\t\tgrid.diffusionLevelColors = [ this.state.colors.font ]\n\t\tlet colorStepDiff = (this.state.colors.torch.color[2] - this.state.colors.font.color[2])/grid.diffusionSteps\n\t\tfor ( let level = 1; level < grid.diffusionSteps + 1 ; level++ ) {\n\t\t\tlet previousColor = grid.diffusionLevelColors[level - 1]\n\t\t\tlet color = Color(previousColor).hsl()\n\t\t\tcolor.color[2] = Math.floor( color.color[2] + colorStepDiff )\n\t\t\tif ( color.color[2] > 100 ) {\n\t\t\t\tcolor.color[2] = 100\n\t\t\t} else if ( color.color[2] < 0 ) {\n\t\t\t\tcolor.color[2] = 0\n\t\t\t}\n\t\t\tgrid.diffusionLevelColors[level] = color\n\t\t}\n\n\t\t// build matrix string\n\t\tlet matrixLength = grid.columns * grid.rows\n\t\tlet textFillRepeats = Math.floor( matrixLength / this.text.length ) + 1\n\t\tlet matrixStringArray = new Array( textFillRepeats ).fill( this.text )\n\t\tlet matrixString = matrixStringArray.join( '' ).substring( 0, matrixLength )\n\n\t\t// build empty diffusion matrix\n\t\tgrid.diffusionMatrix = []\n\t\tfor ( let row = 0; row < grid.rows; row++ ) {\n\t\t\tlet contents = []\n\t\t\tfor ( let column = 0; column < grid.columns; column++ ) {\n\t\t\t\tcontents.push(0)\n\t\t\t}\n\t\t\tgrid.diffusionMatrix.push( contents )\n\t\t}\n\n\t\t// update with focal points\n\t\t// place center\n\t\tgrid.diffusionMatrix[focalPoint.row][focalPoint.column] = grid.diffusionSteps\n\t\t// loop thru each level\n\t\tfor ( let level = grid.diffusionSteps - 1; level > 0; level-- ) {\n\t\t\t// loop through each matrix element\n\t\t\tgrid.diffusionMatrix.forEach( (row, rowIndex) => {\n\t\t\t\trow.forEach( (column, columnIndex) => {\n\t\t\t\t\t// check if any neighbors have previous level\n\t\t\t\t\tif ( this.neighborsHaveLevel( grid.diffusionMatrix, level + 1, rowIndex, columnIndex ) && grid.diffusionMatrix[rowIndex][columnIndex] < level ) {\n\t\t\t\t\t\t// if so mark as this level\n\t\t\t\t\t\tgrid.diffusionMatrix[rowIndex][columnIndex] = level\n\t\t\t\t\t}\t\t\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\n\t\t// build matrix from matrix string\n\t\tgrid.matrix = []\n\t\tlet stringPosition = 0\n\t\tfor ( let row = 0; row < grid.rows; row++ ) {\n\t\t\tlet contents = []\n\t\t\tfor ( let column = 0; column < grid.columns; column++ ) {\n\t\t\t\tlet level = grid.diffusionMatrix[row][column]\n\t\t\t\tcontents.push(\n\t\t\t\t\tthis.createGridItem(\n\t\t\t\t\t\tmatrixString[stringPosition],\n\t\t\t\t\t\tgrid.diffusionLevelColors[level],\n\t\t\t\t\t\trow,\n\t\t\t\t\t\tcolumn,\n\t\t\t\t\t\tlevel,\n\t\t\t\t\t\tgrid.diffusionLevelWeights[level],\n\t\t\t\t\t\tgrid.diffusionLevelWidths[level],\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\tstringPosition++\n\t\t\t}\n\t\t\tgrid.matrix.push( contents )\n\t\t}\n\n\t\tif (this.props.rainbow) {\n\t\t\tlet colors = {\n\t\t\t\tbackground: Color({\n\t\t\t\t\th: this.randomInt(0,255),\n\t\t\t\t\ts: this.randomInt(0,255),\n\t\t\t\t\tl: this.randomInt(0,100)\n\t\t\t\t}),\n\t\t\t\tfont: Color({\n\t\t\t\t\th: this.randomInt(0,255),\n\t\t\t\t\ts: this.randomInt(0,255),\n\t\t\t\t\tl: this.randomInt(0,100)\n\t\t\t\t}),\n\t\t\t\ttorch: Color({\n\t\t\t\t\th: this.randomInt(0,255),\n\t\t\t\t\ts: this.randomInt(0,255),\n\t\t\t\t\tl: this.randomInt(0,100)\n\t\t\t\t})\n\t\t\t}\n\t\t\t// set state with new grid\n\t\t\tthis.setState( prevState => ({\n\t\t\t\tcolors: colors\n\t\t\t}))\n\t\t}\n\n\t\t// set state with new grid\n\t\tthis.setState( prevState => ({\n\t\t\tgrid: grid,\n\t\t\tfocus: focalPoint\n\t\t}))\n\t}\n\n\tneighborsHaveLevel( matrix, level, row, column ) {\n\t\tlet left = ( this.doesMatrixPositionExist( matrix, row, column - 1 ) && ( matrix[row][column - 1] === level ) )\n\t\tlet right = ( this.doesMatrixPositionExist( matrix, row, column + 1 ) && ( matrix[row][column + 1] === level ) )\n\t\tlet top = ( this.doesMatrixPositionExist( matrix, row - 1, column ) && ( matrix[row - 1][column] === level ) )\n\t\tlet bottom = ( this.doesMatrixPositionExist( matrix, row + 1, column ) && ( matrix[row + 1][column] === level ) )\n\t\treturn left || right || top || bottom\n\t}\n\n\tdoesMatrixPositionExist(matrix, row, column) {\n\t\t// check if past length or below 0\n\t\treturn !( row > matrix.length - 1 || row < 0 || column > matrix[0].length - 1 || column < 0 )\n\t}\n\n\tcreateGridItem( character, color, row, column, level, weight, width ) {\n\t\treturn {\n\t\t\tcharacter: character,\n\t\t\tcolor: color,\n\t\t\tlevel: level,\n\t\t\trow: row,\n\t\t\tcolumn: column,\n\t\t\twidth: width,\n\t\t\tweight: weight\n\t\t}\n\t}\n\n\tnewFocusPoint(row, column) {\n\t\tthis.createGrid( this.refs.container, { row:row, column:column } )\n\t}\n\n\trandomInt(min, max) {\n\t\treturn Math.random() * (max - min) + min\n\t}\n\n\trender() {\n\t\tlet renderMatrix = []\n\t\tlet rowStyle = {\n\t\t\tdisplay: `flex`,\n\t\t\tflexWrap: `nowrap`,\n\t\t\tjustifyContent: `space-between`\n\t\t}\n\t\tif ( this.state.grid.matrix ) {\n\t\t\tthis.state.grid.matrix.forEach( (row, rowIndex) => {\n\t\t\t\tlet rowContents = []\n\t\t\t\trow.forEach( column => {\n\t\t\t\t\trowContents.push(\n\t\t\t\t\t\t<TorchCharacter\n\t\t\t\t\t\t\tcharacter={column.character}\n\t\t\t\t\t\t\tsize={this.state.grid.itemSize}\n\t\t\t\t\t\t\tcolor={column.color}\n\t\t\t\t\t\t\tlevel={column.level}\n\t\t\t\t\t\t\tkey={(column.row * 10) + column.column}\n\t\t\t\t\t\t\thover={this.newFocusPoint}\n\t\t\t\t\t\t\trow={column.row}\n\t\t\t\t\t\t\tcolumn={column.column}\n\t\t\t\t\t\t\twidth={column.width}\n\t\t\t\t\t\t\tweight={column.weight}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t\trenderMatrix.push(\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={rowStyle}\n\t\t\t\t\t\tkey={rowIndex}\n\t\t\t\t\t>\n\t\t\t\t\t\t{rowContents}\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})\n\t\t}\n\n\t\treturn (\n\t\t  <div\n\t\t  \tref=\"container\"\n\t\t  \taria-label={this.ariaLabel}\n\t\t  \tstyle={{\n\t\t  \t\tbackgroundColor: this.state.colors.background,\n\t\t  \t\ttransition: `background-color .1s ease-in-out`,\n\t\t\t  \tuserSelect: `none`,\n\t\t  \t}}\n\t\t  >\n\t\t  \t<div\n\t\t  \t\tstyle={{\n\t\t  \t\t\twidth: `100vw`,\n\t\t  \t\t\theight: `100vh`,\n\t\t  \t\t\toverflow: `hidden`,\n\t\t\t  \t\tdisplay: `flex`,\n\t\t\t  \t\tflexDirection: `column`,\n\t\t\t  \t\tjustifyContent: `space-between`,\n\t\t\t  \t\talignContent: `strech`,\n\t\t  \t\t}}\n\t\t  \t>\n\t\t  \t\t{renderMatrix}\n\t\t  \t</div>\n\t\t  </div>\n\t\t)\n\t}\n}\n\nexport default Torch"],"sourceRoot":""}